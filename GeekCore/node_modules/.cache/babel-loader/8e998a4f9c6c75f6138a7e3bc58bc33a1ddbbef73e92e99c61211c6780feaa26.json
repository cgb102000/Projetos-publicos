{"ast":null,"code":"import axios from 'axios';\nconst getBaseUrl = () => {\n  const hostname = window.location.hostname;\n  const port = process.env.REACT_APP_API_PORT || '3001';\n  return process.env.REACT_APP_API_URL || `http://${hostname}:${port}`;\n};\nconst MAX_RETRIES = 3;\nconst RETRY_DELAY = 2000; // Aumentado para 2 segundos\n\nconst api = axios.create({\n  baseURL: getBaseUrl(),\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Melhorar interceptor de retry\napi.interceptors.response.use(null, async error => {\n  const {\n    config\n  } = error;\n  if (!config || !config.retry) {\n    config.retry = MAX_RETRIES;\n    config.retryDelay = RETRY_DELAY;\n  }\n  config.retryCount = config.retryCount || 0;\n  if (config.retryCount >= config.retry) {\n    console.error('Máximo de tentativas atingido:', config.url);\n    return Promise.reject(error);\n  }\n  config.retryCount += 1;\n\n  // Log mais informativo\n  console.log(`Tentativa ${config.retryCount}/${config.retry} para ${config.url}. Próxima tentativa em ${config.retryDelay}ms`);\n  return new Promise(resolve => {\n    setTimeout(() => resolve(api(config)), config.retryDelay);\n  });\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Melhorar o interceptor de erro\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response2, _error$response2$data, _error$config;\n  if (!error.response) {\n    console.error('Erro de rede:', error.message);\n    throw new Error('Servidor indisponível. Verifique sua conexão.');\n  }\n  if (error.response.status === 503) {\n    console.error('Servidor em manutenção');\n    throw new Error('Servidor em manutenção. Tente novamente em alguns instantes.');\n  }\n\n  // Preservar cor do tema ao recarregar estado\n  const temaAtual = document.documentElement.style.getPropertyValue('--color-primary');\n  if (temaAtual) {\n    localStorage.setItem('tema_cor', temaAtual);\n  }\n  if (error.code === 'ERR_NETWORK') {\n    console.error('Erro de conexão - Servidor está rodando?');\n    // Tentar reconectar\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(api(error.config));\n      }, 3000);\n    });\n  }\n  console.error('API Error:', {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url\n  });\n  return Promise.reject(error);\n});\nexport const authService = {\n  async login(email, senha) {\n    try {\n      console.log('Tentando login com:', {\n        email\n      });\n      const response = await api.post('/api/auth/login', {\n        email: email.toLowerCase().trim(),\n        senha: senha\n      });\n      const {\n        data\n      } = response;\n      console.log('Resposta do servidor:', data);\n      if (data.success && data.token) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        return data;\n      }\n      throw new Error(data.message || 'Erro ao fazer login');\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response4$data;\n      console.error('Erro de login:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || error.message || 'Email ou senha inválidos');\n    }\n  },\n  async register(nome, email, senha) {\n    const {\n      data\n    } = await api.post('/api/auth/register', {\n      nome,\n      email,\n      senha\n    });\n    return data;\n  },\n  async toggleFavorite(conteudoId, tipo) {\n    try {\n      if (!conteudoId || !tipo) {\n        throw new Error('ID do conteúdo e tipo são obrigatórios');\n      }\n      const {\n        data\n      } = await api.post('/api/auth/favoritos', {\n        conteudo_id: conteudoId,\n        tipo: tipo.toLowerCase().replace('s', '')\n      });\n\n      // Atualizar o localStorage com o novo estado\n      const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');\n      if (data.isFavorito) {\n        favorites.push(conteudoId);\n      } else {\n        const index = favorites.indexOf(conteudoId);\n        if (index > -1) favorites.splice(index, 1);\n      }\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      return {\n        ...data,\n        isFavorito: data.isFavorito,\n        message: data.isFavorito ? 'Item adicionado aos favoritos!' : 'Item removido dos favoritos!'\n      };\n    } catch (error) {\n      var _error$response5;\n      console.error('Detalhes do erro:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n      throw error;\n    }\n  },\n  async getFavorites() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return [];\n      const {\n        data\n      } = await api.get('/api/auth/favoritos');\n\n      // Garantir que todos os itens retornados tenham a propriedade isFavorited como true\n      return Array.isArray(data) ? data.map(fav => ({\n        ...fav,\n        isFavorited: true\n      })) : [];\n    } catch (error) {\n      console.error('Erro ao buscar favoritos:', error);\n      return [];\n    }\n  },\n  async getUserProfile() {\n    const {\n      data\n    } = await api.get('/api/auth/perfil');\n\n    // Salvar a cor do tema no localStorage para uso global\n    if (data.tema_cor) {\n      localStorage.setItem('tema_cor', data.tema_cor);\n    }\n    return data;\n  },\n  async getPublicProfile(userId) {\n    try {\n      const [profileData, favoritosData] = await Promise.all([api.get(`/api/auth/perfil/${userId}`), api.get(`/api/auth/favoritos/${userId}`)]);\n      return {\n        ...profileData.data,\n        favoritos: Array.isArray(favoritosData.data) ? favoritosData.data : []\n      };\n    } catch (error) {\n      console.error('Erro ao buscar perfil:', error);\n      return {\n        ...profileData.data,\n        favoritos: []\n      };\n    }\n  },\n  async updateUserProfile(profileData) {\n    try {\n      // Verifica o tamanho da string base64 da foto\n      if (profileData.foto && profileData.foto.length > 2 * 1024 * 1024) {\n        // 2MB em caracteres base64\n        throw new Error('Imagem muito grande. Máximo: 2MB');\n      }\n      const {\n        data\n      } = await api.put('/api/auth/perfil', profileData);\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n      const updatedUser = {\n        ...currentUser,\n        ...data.user\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Erro ao atualizar perfil:', error);\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || error.message || 'Erro ao atualizar perfil';\n    }\n  },\n  async changePassword(senhaAtual, novaSenha) {\n    try {\n      const {\n        data\n      } = await api.post('/api/auth/change-password', {\n        senha_atual: senhaAtual,\n        nova_senha: novaSenha\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport const contentService = {\n  // Cache para armazenar resultados recentes\n  _cache: new Map(),\n  _cacheTimeout: 5 * 60 * 1000,\n  // 5 minutos\n\n  async getFromCacheOrFetch(key, fetchFn) {\n    const cached = this._cache.get(key);\n    if (cached && Date.now() - cached.timestamp < this._cacheTimeout) {\n      return cached.data;\n    }\n    const data = await fetchFn();\n    this._cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n    return data;\n  },\n  async getItem(id) {\n    try {\n      if (!id) {\n        throw new Error('ID inválido');\n      }\n      const {\n        data\n      } = await api.get(`/api/item/${id}`);\n      if (!data) {\n        throw new Error('Item não encontrado');\n      }\n      return data;\n    } catch (error) {\n      console.error('Erro ao buscar item:', error.message);\n      throw error;\n    }\n  },\n  async getRecommendations() {\n    try {\n      // Verificar saúde do servidor primeiro\n      await api.get('/api/health');\n      const {\n        data\n      } = await api.get('/api/random');\n      return data || [];\n    } catch (error) {\n      console.error('Erro ao buscar recomendações:', error.message);\n      throw new Error('Servidor indisponível. Tente novamente mais tarde.');\n    }\n  },\n  async getRecentContent() {\n    try {\n      // Verificar saúde do servidor primeiro\n      await api.get('/api/health');\n      const {\n        data\n      } = await api.get('/api/recent');\n      return data || [];\n    } catch (error) {\n      console.error('Erro ao buscar conteúdo recente:', error.message);\n      throw new Error('Servidor indisponível. Tente novamente mais tarde.');\n    }\n  },\n  async searchContent(query) {\n    try {\n      const {\n        data\n      } = await api.get(`/api/search?q=${encodeURIComponent(query)}`);\n      return data || [];\n    } catch (error) {\n      console.error('Erro ao buscar conteúdo:', error.message);\n      return [];\n    }\n  }\n};\nexport const amigoService = {\n  async enviarSolicitacao(email) {\n    try {\n      console.log('Tentando enviar solicitação para:', email);\n      const response = await api.post('/api/auth/amizade/solicitar', {\n        email\n      }, {\n        timeout: 2000 // Timeout específico para esta requisição\n      });\n      console.log('Resposta do servidor:', response.data);\n      if (!response.data.success) {\n        throw new Error(response.data.message || 'Erro ao enviar solicitação');\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response8, _error$response8$data;\n      console.error('Erro detalhado:', ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error);\n\n      // Melhorar tratamento de erro\n      const errorMessage = ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || error.message;\n      throw new Error(errorMessage);\n    }\n  },\n  async responderSolicitacao(solicitacaoId, aceitar) {\n    try {\n      const {\n        data\n      } = await api.post('/api/auth/amizade/responder', {\n        solicitacaoId,\n        aceitar\n      });\n      return data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Erro ao responder solicitação';\n    }\n  },\n  async listarAmigos() {\n    try {\n      const {\n        data\n      } = await api.get('/api/auth/amigos');\n      return data;\n    } catch (error) {\n      console.error('Erro ao listar amigos:', error);\n      return [];\n    }\n  },\n  async listarSolicitacoes() {\n    try {\n      const {\n        data\n      } = await api.get('/api/auth/amizade/solicitacoes');\n      return data;\n    } catch (error) {\n      console.error('Erro ao listar solicitações:', error);\n      return [];\n    }\n  }\n};\nexport const mensagemService = {\n  async enviarMensagem(destinatarioId, conteudo) {\n    const {\n      data\n    } = await api.post('/api/mensagens', {\n      destinatario_id: destinatarioId,\n      conteudo\n    });\n    return data;\n  },\n  async listarConversas() {\n    const {\n      data\n    } = await api.get('/api/mensagens/conversas');\n    return data;\n  },\n  async buscarMensagens(userId) {\n    const {\n      data\n    } = await api.get(`/api/mensagens/${userId}`);\n    return data;\n  },\n  subscribeToMessages(callback) {\n    try {\n      const socket = io(process.env.REACT_APP_API_URL || 'http://localhost:3001', {\n        auth: {\n          token: localStorage.getItem('token')\n        },\n        reconnection: true,\n        reconnectionDelay: 1000,\n        reconnectionAttempts: 5\n      });\n      socket.on('connect_error', error => {\n        console.error('Erro na conexão do WebSocket:', error);\n        throw new Error('Erro na conexão do chat');\n      });\n      socket.on('nova_mensagem', data => {\n        if (callback) callback(data);\n      });\n      return () => {\n        if (socket) {\n          socket.disconnect();\n        }\n      };\n    } catch (error) {\n      console.error('Erro ao subscrever mensagens:', error);\n      throw error;\n    }\n  },\n  async marcarComoLida(mensagemId) {\n    const {\n      data\n    } = await api.put(`/api/mensagens/${mensagemId}/lida`);\n    return data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","getBaseUrl","hostname","window","location","port","process","env","REACT_APP_API_PORT","REACT_APP_API_URL","MAX_RETRIES","RETRY_DELAY","api","create","baseURL","timeout","headers","withCredentials","interceptors","response","use","error","config","retry","retryDelay","retryCount","console","url","Promise","reject","log","resolve","setTimeout","request","token","localStorage","getItem","Authorization","_error$response","_error$response2","_error$response2$data","_error$config","message","Error","status","temaAtual","document","documentElement","style","getPropertyValue","setItem","code","data","authService","login","email","senha","post","toLowerCase","trim","success","JSON","stringify","user","_error$response3","_error$response4","_error$response4$data","register","nome","toggleFavorite","conteudoId","tipo","conteudo_id","replace","favorites","parse","isFavorito","push","index","indexOf","splice","_error$response5","getFavorites","get","Array","isArray","map","fav","isFavorited","getUserProfile","tema_cor","getPublicProfile","userId","profileData","favoritosData","all","favoritos","updateUserProfile","foto","length","put","currentUser","updatedUser","_error$response6","_error$response6$data","changePassword","senhaAtual","novaSenha","senha_atual","nova_senha","contentService","_cache","Map","_cacheTimeout","getFromCacheOrFetch","key","fetchFn","cached","Date","now","timestamp","set","id","getRecommendations","getRecentContent","searchContent","query","encodeURIComponent","amigoService","enviarSolicitacao","_error$response7","_error$response8","_error$response8$data","errorMessage","responderSolicitacao","solicitacaoId","aceitar","_error$response9","_error$response9$data","listarAmigos","listarSolicitacoes","mensagemService","enviarMensagem","destinatarioId","conteudo","destinatario_id","listarConversas","buscarMensagens","subscribeToMessages","callback","socket","io","auth","reconnection","reconnectionDelay","reconnectionAttempts","on","disconnect","marcarComoLida","mensagemId"],"sources":["C:/Users/Caio/Documents/GitHub/Projetos-publicos/GeekCore/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst getBaseUrl = () => {\r\n  const hostname = window.location.hostname;\r\n  const port = process.env.REACT_APP_API_PORT || '3001';\r\n  return process.env.REACT_APP_API_URL || `http://${hostname}:${port}`;\r\n};\r\n\r\nconst MAX_RETRIES = 3;\r\nconst RETRY_DELAY = 2000; // Aumentado para 2 segundos\r\n\r\nconst api = axios.create({\r\n  baseURL: getBaseUrl(),\r\n  timeout: 5000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  },\r\n  withCredentials: true\r\n});\r\n\r\n// Melhorar interceptor de retry\r\napi.interceptors.response.use(null, async (error) => {\r\n  const { config } = error;\r\n  \r\n  if (!config || !config.retry) {\r\n    config.retry = MAX_RETRIES;\r\n    config.retryDelay = RETRY_DELAY;\r\n  }\r\n\r\n  config.retryCount = config.retryCount || 0;\r\n\r\n  if (config.retryCount >= config.retry) {\r\n    console.error('Máximo de tentativas atingido:', config.url);\r\n    return Promise.reject(error);\r\n  }\r\n\r\n  config.retryCount += 1;\r\n\r\n  // Log mais informativo\r\n  console.log(`Tentativa ${config.retryCount}/${config.retry} para ${config.url}. Próxima tentativa em ${config.retryDelay}ms`);\r\n\r\n  return new Promise(resolve => {\r\n    setTimeout(() => resolve(api(config)), config.retryDelay);\r\n  });\r\n});\r\n\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Melhorar o interceptor de erro\r\napi.interceptors.response.use(\r\n  response => response,\r\n  async error => {\r\n    if (!error.response) {\r\n      console.error('Erro de rede:', error.message);\r\n      throw new Error('Servidor indisponível. Verifique sua conexão.');\r\n    }\r\n\r\n    if (error.response.status === 503) {\r\n      console.error('Servidor em manutenção');\r\n      throw new Error('Servidor em manutenção. Tente novamente em alguns instantes.');\r\n    }\r\n\r\n    // Preservar cor do tema ao recarregar estado\r\n    const temaAtual = document.documentElement.style.getPropertyValue('--color-primary');\r\n    if (temaAtual) {\r\n      localStorage.setItem('tema_cor', temaAtual);\r\n    }\r\n\r\n    if (error.code === 'ERR_NETWORK') {\r\n      console.error('Erro de conexão - Servidor está rodando?');\r\n      // Tentar reconectar\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve(api(error.config));\r\n        }, 3000);\r\n      });\r\n    }\r\n    \r\n    console.error('API Error:', {\r\n      status: error.response?.status,\r\n      message: error.response?.data?.message || error.message,\r\n      url: error.config?.url\r\n    });\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  async login(email, senha) {\r\n    try {\r\n      console.log('Tentando login com:', { email });\r\n\r\n      const response = await api.post('/api/auth/login', { \r\n        email: email.toLowerCase().trim(),\r\n        senha: senha\r\n      });\r\n\r\n      const { data } = response;\r\n      console.log('Resposta do servidor:', data);\r\n\r\n      if (data.success && data.token) {\r\n        localStorage.setItem('token', data.token);\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n        return data;\r\n      }\r\n      \r\n      throw new Error(data.message || 'Erro ao fazer login');\r\n    } catch (error) {\r\n      console.error('Erro de login:', error.response?.data || error);\r\n      throw new Error(\r\n        error.response?.data?.message || \r\n        error.message || \r\n        'Email ou senha inválidos'\r\n      );\r\n    }\r\n  },\r\n\r\n  async register(nome, email, senha) {\r\n    const { data } = await api.post('/api/auth/register', { nome, email, senha });\r\n    return data;\r\n  },\r\n\r\n  async toggleFavorite(conteudoId, tipo) {\r\n    try {\r\n      if (!conteudoId || !tipo) {\r\n        throw new Error('ID do conteúdo e tipo são obrigatórios');\r\n      }\r\n\r\n      const { data } = await api.post('/api/auth/favoritos', {\r\n        conteudo_id: conteudoId,\r\n        tipo: tipo.toLowerCase().replace('s', '')\r\n      });\r\n\r\n      // Atualizar o localStorage com o novo estado\r\n      const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');\r\n      if (data.isFavorito) {\r\n        favorites.push(conteudoId);\r\n      } else {\r\n        const index = favorites.indexOf(conteudoId);\r\n        if (index > -1) favorites.splice(index, 1);\r\n      }\r\n      localStorage.setItem('favorites', JSON.stringify(favorites));\r\n\r\n      return {\r\n        ...data,\r\n        isFavorito: data.isFavorito,\r\n        message: data.isFavorito \r\n          ? 'Item adicionado aos favoritos!' \r\n          : 'Item removido dos favoritos!'\r\n      };\r\n    } catch (error) {\r\n      console.error('Detalhes do erro:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getFavorites() {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) return [];\r\n\r\n      const { data } = await api.get('/api/auth/favoritos');\r\n      \r\n      // Garantir que todos os itens retornados tenham a propriedade isFavorited como true\r\n      return Array.isArray(data) ? data.map(fav => ({\r\n        ...fav,\r\n        isFavorited: true\r\n      })) : [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar favoritos:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async getUserProfile() {\r\n    const { data } = await api.get('/api/auth/perfil');\r\n    \r\n    // Salvar a cor do tema no localStorage para uso global\r\n    if (data.tema_cor) {\r\n      localStorage.setItem('tema_cor', data.tema_cor);\r\n    }\r\n    \r\n    return data;\r\n  },\r\n\r\n  async getPublicProfile(userId) {\r\n    try {\r\n      const [profileData, favoritosData] = await Promise.all([\r\n        api.get(`/api/auth/perfil/${userId}`),\r\n        api.get(`/api/auth/favoritos/${userId}`)\r\n      ]);\r\n\r\n      return {\r\n        ...profileData.data,\r\n        favoritos: Array.isArray(favoritosData.data) ? favoritosData.data : []\r\n      };\r\n    } catch (error) {\r\n      console.error('Erro ao buscar perfil:', error);\r\n      return {\r\n        ...profileData.data,\r\n        favoritos: []\r\n      };\r\n    }\r\n  },\r\n\r\n  async updateUserProfile(profileData) {\r\n    try {\r\n      // Verifica o tamanho da string base64 da foto\r\n      if (profileData.foto && profileData.foto.length > 2 * 1024 * 1024) { // 2MB em caracteres base64\r\n        throw new Error('Imagem muito grande. Máximo: 2MB');\r\n      }\r\n\r\n      const { data } = await api.put('/api/auth/perfil', profileData);\r\n      \r\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\r\n      const updatedUser = { ...currentUser, ...data.user };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar perfil:', error);\r\n      throw error.response?.data?.message || error.message || 'Erro ao atualizar perfil';\r\n    }\r\n  },\r\n\r\n  async changePassword(senhaAtual, novaSenha) {\r\n    try {\r\n      const { data } = await api.post('/api/auth/change-password', {\r\n        senha_atual: senhaAtual,\r\n        nova_senha: novaSenha\r\n      });\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport const contentService = {\r\n  // Cache para armazenar resultados recentes\r\n  _cache: new Map(),\r\n  _cacheTimeout: 5 * 60 * 1000, // 5 minutos\r\n\r\n  async getFromCacheOrFetch(key, fetchFn) {\r\n    const cached = this._cache.get(key);\r\n    if (cached && Date.now() - cached.timestamp < this._cacheTimeout) {\r\n      return cached.data;\r\n    }\r\n    const data = await fetchFn();\r\n    this._cache.set(key, { data, timestamp: Date.now() });\r\n    return data;\r\n  },\r\n\r\n  async getItem(id) {\r\n    try {\r\n      if (!id) {\r\n        throw new Error('ID inválido');\r\n      }\r\n\r\n      const { data } = await api.get(`/api/item/${id}`);\r\n      if (!data) {\r\n        throw new Error('Item não encontrado');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar item:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getRecommendations() {\r\n    try {\r\n      // Verificar saúde do servidor primeiro\r\n      await api.get('/api/health');\r\n      \r\n      const { data } = await api.get('/api/random');\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar recomendações:', error.message);\r\n      throw new Error('Servidor indisponível. Tente novamente mais tarde.');\r\n    }\r\n  },\r\n\r\n  async getRecentContent() {\r\n    try {\r\n      // Verificar saúde do servidor primeiro\r\n      await api.get('/api/health');\r\n      \r\n      const { data } = await api.get('/api/recent');\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar conteúdo recente:', error.message);\r\n      throw new Error('Servidor indisponível. Tente novamente mais tarde.');\r\n    }\r\n  },\r\n\r\n  async searchContent(query) {\r\n    try {\r\n      const { data } = await api.get(`/api/search?q=${encodeURIComponent(query)}`);\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar conteúdo:', error.message);\r\n      return [];\r\n    }\r\n  }\r\n};\r\n\r\nexport const amigoService = {\r\n  async enviarSolicitacao(email) {\r\n    try {\r\n      console.log('Tentando enviar solicitação para:', email);\r\n      const response = await api.post('/api/auth/amizade/solicitar', { email }, {\r\n        timeout: 2000 // Timeout específico para esta requisição\r\n      });\r\n      \r\n      console.log('Resposta do servidor:', response.data);\r\n      \r\n      if (!response.data.success) {\r\n        throw new Error(response.data.message || 'Erro ao enviar solicitação');\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro detalhado:', error.response?.data || error);\r\n      \r\n      // Melhorar tratamento de erro\r\n      const errorMessage = error.response?.data?.message || error.message;\r\n      throw new Error(errorMessage);\r\n    }\r\n  },\r\n\r\n  async responderSolicitacao(solicitacaoId, aceitar) {\r\n    try {\r\n      const { data } = await api.post('/api/auth/amizade/responder', { \r\n        solicitacaoId, \r\n        aceitar \r\n      });\r\n      return data;\r\n    } catch (error) {\r\n      throw error.response?.data?.message || 'Erro ao responder solicitação';\r\n    }\r\n  },\r\n\r\n  async listarAmigos() {\r\n    try {\r\n      const { data } = await api.get('/api/auth/amigos');\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erro ao listar amigos:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async listarSolicitacoes() {\r\n    try {\r\n      const { data } = await api.get('/api/auth/amizade/solicitacoes');\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erro ao listar solicitações:', error);\r\n      return [];\r\n    }\r\n  }\r\n};\r\n\r\nexport const mensagemService = {\r\n  async enviarMensagem(destinatarioId, conteudo) {\r\n    const { data } = await api.post('/api/mensagens', {\r\n      destinatario_id: destinatarioId,\r\n      conteudo\r\n    });\r\n    return data;\r\n  },\r\n\r\n  async listarConversas() {\r\n    const { data } = await api.get('/api/mensagens/conversas');\r\n    return data;\r\n  },\r\n\r\n  async buscarMensagens(userId) {\r\n    const { data } = await api.get(`/api/mensagens/${userId}`);\r\n    return data;\r\n  },\r\n\r\n  subscribeToMessages(callback) {\r\n    try {\r\n      const socket = io(process.env.REACT_APP_API_URL || 'http://localhost:3001', {\r\n        auth: { token: localStorage.getItem('token') },\r\n        reconnection: true,\r\n        reconnectionDelay: 1000,\r\n        reconnectionAttempts: 5\r\n      });\r\n\r\n      socket.on('connect_error', (error) => {\r\n        console.error('Erro na conexão do WebSocket:', error);\r\n        throw new Error('Erro na conexão do chat');\r\n      });\r\n\r\n      socket.on('nova_mensagem', (data) => {\r\n        if (callback) callback(data);\r\n      });\r\n\r\n      return () => {\r\n        if (socket) {\r\n          socket.disconnect();\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Erro ao subscrever mensagens:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async marcarComoLida(mensagemId) {\r\n    const { data } = await api.put(`/api/mensagens/${mensagemId}/lida`);\r\n    return data;\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}