{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001',\n  timeout: 10000,\n  withCredentials: true\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Melhorar o interceptor de erro\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$response2$data, _error$config;\n  if (error.code === 'ERR_NETWORK') {\n    console.error('Erro de conexão - Servidor está rodando?');\n    // Tentar reconectar\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(api(error.config));\n      }, 3000);\n    });\n  }\n  console.error('API Error:', {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url\n  });\n  return Promise.reject(error);\n});\nexport const authService = {\n  async login(email, senha) {\n    const {\n      data\n    } = await api.post('/api/auth/login', {\n      email,\n      senha\n    });\n    return data;\n  },\n  async register(nome, email, senha) {\n    const {\n      data\n    } = await api.post('/api/auth/register', {\n      nome,\n      email,\n      senha\n    });\n    return data;\n  },\n  async toggleFavorite(conteudoId, tipo) {\n    try {\n      if (!conteudoId || !tipo) {\n        throw new Error('ID do conteúdo e tipo são obrigatórios');\n      }\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Usuário não autenticado');\n      }\n      const {\n        data\n      } = await api.post('/api/auth/favoritos', {\n        conteudo_id: conteudoId.toString(),\n        tipo,\n        collection: tipo === 'anime' ? 'animes' : 'filmes'\n      });\n      return data;\n    } catch (error) {\n      var _error$response3;\n      console.error('Erro ao favoritar:', error);\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n        throw new Error('Faça login para favoritar');\n      }\n      throw error;\n    }\n  },\n  async getFavorites() {\n    const {\n      data\n    } = await api.get('/api/auth/favoritos');\n    return data;\n  }\n};\nexport const contentService = {\n  // Cache para armazenar resultados recentes\n  _cache: new Map(),\n  _cacheTimeout: 5 * 60 * 1000,\n  // 5 minutos\n\n  async getFromCacheOrFetch(key, fetchFn) {\n    const cached = this._cache.get(key);\n    if (cached && Date.now() - cached.timestamp < this._cacheTimeout) {\n      return cached.data;\n    }\n    const data = await fetchFn();\n    this._cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n    return data;\n  },\n  async getRecentContent() {\n    return this.getFromCacheOrFetch('recent', async () => {\n      const {\n        data\n      } = await api.get('/api/recent');\n      return data;\n    });\n  },\n  async searchContent(query) {\n    const {\n      data\n    } = await api.get(`/api/search?q=${encodeURIComponent(query)}`);\n    return data;\n  },\n  async getItem(collection, id) {\n    try {\n      if (!id || !collection) {\n        throw new Error('ID ou collection inválidos');\n      }\n\n      // Log para debug\n      console.log('Requisição getItem:', {\n        collection,\n        id\n      });\n      const {\n        data\n      } = await api.get(`/api/item/${collection}/${id}`);\n      if (!data) {\n        throw new Error('Item não encontrado');\n      }\n\n      // Log do dado recebido\n      console.log('Dados recebidos:', data);\n      return {\n        ...data,\n        collection: collection,\n        tipo: collection === 'animes' ? 'anime' : 'filme'\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data, _error$response5;\n      // Melhor tratamento de erro\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || error.message;\n      console.error('Erro ao buscar item:', {\n        error: errorMessage,\n        collection,\n        id,\n        status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status\n      });\n      throw new Error(errorMessage);\n    }\n  },\n  async getRecommendations(collection) {\n    try {\n      console.log(`Requisitando recomendações para: ${collection}`);\n      const {\n        data\n      } = await api.get(`/api/random/${collection}`);\n      return data.map(item => ({\n        ...item,\n        collection: collection,\n        tipo: collection === 'animes' ? 'anime' : 'filme'\n      }));\n    } catch (error) {\n      console.error('Erro ao buscar recomendações:', error);\n      return [];\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","_error$response","_error$response2","_error$response2$data","_error$config","code","console","Promise","resolve","setTimeout","status","message","data","url","reject","authService","login","email","senha","post","register","nome","toggleFavorite","conteudoId","tipo","Error","conteudo_id","toString","collection","_error$response3","getFavorites","get","contentService","_cache","Map","_cacheTimeout","getFromCacheOrFetch","key","fetchFn","cached","Date","now","timestamp","set","getRecentContent","searchContent","query","encodeURIComponent","id","log","_error$response4","_error$response4$data","_error$response5","errorMessage","getRecommendations","map","item"],"sources":["C:/Users/Caio/Documents/GitHub/Projetos-publicos/GeekCore/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001',\r\n  timeout: 10000,\r\n  withCredentials: true\r\n});\r\n\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Melhorar o interceptor de erro\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    if (error.code === 'ERR_NETWORK') {\r\n      console.error('Erro de conexão - Servidor está rodando?');\r\n      // Tentar reconectar\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve(api(error.config));\r\n        }, 3000);\r\n      });\r\n    }\r\n    \r\n    console.error('API Error:', {\r\n      status: error.response?.status,\r\n      message: error.response?.data?.message || error.message,\r\n      url: error.config?.url\r\n    });\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  async login(email, senha) {\r\n    const { data } = await api.post('/api/auth/login', { email, senha });\r\n    return data;\r\n  },\r\n\r\n  async register(nome, email, senha) {\r\n    const { data } = await api.post('/api/auth/register', { nome, email, senha });\r\n    return data;\r\n  },\r\n\r\n  async toggleFavorite(conteudoId, tipo) {\r\n    try {\r\n      if (!conteudoId || !tipo) {\r\n        throw new Error('ID do conteúdo e tipo são obrigatórios');\r\n      }\r\n      \r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('Usuário não autenticado');\r\n      }\r\n\r\n      const { data } = await api.post('/api/auth/favoritos', { \r\n        conteudo_id: conteudoId.toString(), \r\n        tipo,\r\n        collection: tipo === 'anime' ? 'animes' : 'filmes'\r\n      });\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erro ao favoritar:', error);\r\n      if (error.response?.status === 401) {\r\n        throw new Error('Faça login para favoritar');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getFavorites() {\r\n    const { data } = await api.get('/api/auth/favoritos');\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const contentService = {\r\n  // Cache para armazenar resultados recentes\r\n  _cache: new Map(),\r\n  _cacheTimeout: 5 * 60 * 1000, // 5 minutos\r\n\r\n  async getFromCacheOrFetch(key, fetchFn) {\r\n    const cached = this._cache.get(key);\r\n    if (cached && Date.now() - cached.timestamp < this._cacheTimeout) {\r\n      return cached.data;\r\n    }\r\n    const data = await fetchFn();\r\n    this._cache.set(key, { data, timestamp: Date.now() });\r\n    return data;\r\n  },\r\n\r\n  async getRecentContent() {\r\n    return this.getFromCacheOrFetch('recent', async () => {\r\n      const { data } = await api.get('/api/recent');\r\n      return data;\r\n    });\r\n  },\r\n\r\n  async searchContent(query) {\r\n    const { data } = await api.get(`/api/search?q=${encodeURIComponent(query)}`);\r\n    return data;\r\n  },\r\n\r\n  async getItem(collection, id) {\r\n    try {\r\n      if (!id || !collection) {\r\n        throw new Error('ID ou collection inválidos');\r\n      }\r\n\r\n      // Log para debug\r\n      console.log('Requisição getItem:', { collection, id });\r\n\r\n      const { data } = await api.get(`/api/item/${collection}/${id}`);\r\n      \r\n      if (!data) {\r\n        throw new Error('Item não encontrado');\r\n      }\r\n\r\n      // Log do dado recebido\r\n      console.log('Dados recebidos:', data);\r\n\r\n      return {\r\n        ...data,\r\n        collection: collection,\r\n        tipo: collection === 'animes' ? 'anime' : 'filme'\r\n      };\r\n    } catch (error) {\r\n      // Melhor tratamento de erro\r\n      const errorMessage = error.response?.data?.message || error.message;\r\n      console.error('Erro ao buscar item:', {\r\n        error: errorMessage,\r\n        collection,\r\n        id,\r\n        status: error.response?.status\r\n      });\r\n      throw new Error(errorMessage);\r\n    }\r\n  },\r\n\r\n  async getRecommendations(collection) {\r\n    try {\r\n      console.log(`Requisitando recomendações para: ${collection}`);\r\n      const { data } = await api.get(`/api/random/${collection}`);\r\n      return data.map(item => ({\r\n        ...item,\r\n        collection: collection,\r\n        tipo: collection === 'animes' ? 'anime' : 'filme'\r\n      }));\r\n    } catch (error) {\r\n      console.error('Erro ao buscar recomendações:', error);\r\n      return [];\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}