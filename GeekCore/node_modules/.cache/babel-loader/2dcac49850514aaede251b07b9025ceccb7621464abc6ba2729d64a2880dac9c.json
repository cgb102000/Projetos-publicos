{"ast":null,"code":"import axios from 'axios';\nimport { adjustBrightness } from '../utils/themeUtils';\nconst getBaseUrl = () => {\n  const hostname = window.location.hostname;\n  return process.env.REACT_APP_API_URL || `http://${hostname}:3001`;\n};\nconst api = axios.create({\n  baseURL: getBaseUrl(),\n  timeout: 3000,\n  // Reduzido de 5000 para 3000ms\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true,\n  retry: 1,\n  // Reduzido de 3 para 1 retry\n  retryDelay: retryCount => retryCount * 500 // Reduzido delay entre retries\n});\n\n// Adicionar interceptor de retry\napi.interceptors.response.use(null, async error => {\n  const {\n    config\n  } = error;\n  if (!config || !config.retry) {\n    return Promise.reject(error);\n  }\n  config.retryCount = config.retryCount || 0;\n  if (config.retryCount >= config.retry) {\n    return Promise.reject(error);\n  }\n  config.retryCount += 1;\n  await new Promise(resolve => setTimeout(resolve, config.retryDelay(config.retryCount)));\n  return api(config);\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Melhorar o interceptor de erro\napi.interceptors.response.use(response => response, async error => {\n  var _error$config, _error$config$url, _error$response, _error$response2, _error$response2$data, _error$config2;\n  if (!error.response) {\n    console.error('Erro de rede:', error.message);\n    throw new Error('Servidor indisponível. Verifique sua conexão.');\n  }\n  if (error.response.status === 503) {\n    console.error('Servidor em manutenção');\n    throw new Error('Servidor em manutenção. Tente novamente em alguns instantes.');\n  }\n\n  // Preservar cor do tema somente se não for logout\n  if (!((_error$config = error.config) !== null && _error$config !== void 0 && (_error$config$url = _error$config.url) !== null && _error$config$url !== void 0 && _error$config$url.includes('/logout'))) {\n    const temaAtual = document.documentElement.style.getPropertyValue('--color-primary');\n    if (temaAtual) {\n      localStorage.setItem('tema_cor', temaAtual);\n    }\n  }\n  if (error.code === 'ERR_NETWORK') {\n    console.error('Erro de conexão - Servidor está rodando?');\n    // Tentar reconectar\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(api(error.config));\n      }, 3000);\n    });\n  }\n  console.error('API Error:', {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message,\n    url: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.url\n  });\n  return Promise.reject(error);\n});\nexport const authService = {\n  async login(email, senha) {\n    try {\n      console.log('Tentando login com:', {\n        email\n      });\n      const response = await api.post('/api/auth/login', {\n        email: email.toLowerCase().trim(),\n        senha: senha\n      });\n      const {\n        data\n      } = response;\n      console.log('Resposta do servidor:', data);\n      if (data.success && data.token) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n\n        // Aplicar tema do usuário se existir\n        if (data.user.tema_cor) {\n          const userColor = data.user.tema_cor;\n          document.documentElement.style.setProperty('--color-primary', userColor);\n          document.documentElement.style.setProperty('--color-hover', adjustBrightness(userColor, -15));\n        }\n        return data;\n      }\n      throw new Error(data.message || 'Erro ao fazer login');\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response4$data;\n      console.error('Erro de login:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || error.message || 'Email ou senha inválidos');\n    }\n  },\n  async register(nome, email, senha) {\n    const {\n      data\n    } = await api.post('/api/auth/register', {\n      nome,\n      email,\n      senha\n    });\n    return data;\n  },\n  async toggleFavorite(conteudoId, tipo) {\n    try {\n      if (!conteudoId || !tipo) {\n        throw new Error('ID do conteúdo e tipo são obrigatórios');\n      }\n      const {\n        data\n      } = await api.post('/api/auth/favoritos', {\n        conteudo_id: conteudoId,\n        tipo: tipo.toLowerCase().replace('s', '')\n      });\n\n      // Atualizar o localStorage com o novo estado\n      const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');\n      if (data.isFavorito) {\n        favorites.push(conteudoId);\n      } else {\n        const index = favorites.indexOf(conteudoId);\n        if (index > -1) favorites.splice(index, 1);\n      }\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      return {\n        ...data,\n        isFavorito: data.isFavorito,\n        message: data.isFavorito ? 'Item adicionado aos favoritos!' : 'Item removido dos favoritos!'\n      };\n    } catch (error) {\n      var _error$response5;\n      console.error('Detalhes do erro:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n      throw error;\n    }\n  },\n  async getFavorites() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return [];\n      const {\n        data\n      } = await api.get('/api/auth/favoritos');\n\n      // Garantir que todos os itens retornados tenham a propriedade isFavorited como true\n      return Array.isArray(data) ? data.map(fav => ({\n        ...fav,\n        isFavorited: true\n      })) : [];\n    } catch (error) {\n      console.error('Erro ao buscar favoritos:', error);\n      return [];\n    }\n  },\n  async getUserProfile() {\n    const {\n      data\n    } = await api.get('/api/auth/perfil');\n\n    // Salvar a cor do tema no localStorage para uso global\n    if (data.tema_cor) {\n      localStorage.setItem('tema_cor', data.tema_cor);\n    }\n    return data;\n  },\n  async getPublicProfile(userId) {\n    try {\n      const [profileData, favoritosData] = await Promise.all([api.get(`/api/auth/perfil/${userId}`), api.get(`/api/auth/favoritos/${userId}`)]);\n      return {\n        ...profileData.data,\n        favoritos: Array.isArray(favoritosData.data) ? favoritosData.data : []\n      };\n    } catch (error) {\n      console.error('Erro ao buscar perfil:', error);\n      return {\n        ...profileData.data,\n        favoritos: []\n      };\n    }\n  },\n  async updateUserProfile(profileData) {\n    try {\n      if (profileData.foto && profileData.foto.length > 2 * 1024 * 1024) {\n        throw new Error('Imagem muito grande. Máximo: 2MB');\n      }\n      const {\n        data\n      } = await api.put('/api/auth/perfil', profileData);\n\n      // Atualizar user no localStorage\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n      const updatedUser = {\n        ...currentUser,\n        ...data.user\n      };\n\n      // Garantir que a cor do tema seja salva\n      if (profileData.tema_cor) {\n        updatedUser.tema_cor = profileData.tema_cor;\n        localStorage.setItem('userThemeColor', profileData.tema_cor);\n\n        // Atualizar as variáveis CSS\n        document.documentElement.style.setProperty('--color-primary', profileData.tema_cor);\n        document.documentElement.style.setProperty('--color-hover', adjustBrightness(profileData.tema_cor, -15));\n      }\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return {\n        ...data,\n        user: updatedUser\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Erro ao atualizar perfil:', error);\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || error.message || 'Erro ao atualizar perfil';\n    }\n  },\n  async changePassword(senhaAtual, novaSenha) {\n    try {\n      const {\n        data\n      } = await api.post('/api/auth/change-password', {\n        senha_atual: senhaAtual,\n        nova_senha: novaSenha\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport const contentService = {\n  // Cache para armazenar resultados recentes\n  _cache: new Map(),\n  _cacheTimeout: 5 * 60 * 1000,\n  // 5 minutos\n\n  async getFromCacheOrFetch(key, fetchFn) {\n    const cached = this._cache.get(key);\n    if (cached && Date.now() - cached.timestamp < this._cacheTimeout) {\n      return cached.data;\n    }\n    const data = await fetchFn();\n    this._cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n    return data;\n  },\n  async getItem(id) {\n    try {\n      if (!id) {\n        throw new Error('ID inválido');\n      }\n      const {\n        data\n      } = await api.get(`/api/item/${id}`);\n      if (!data) {\n        throw new Error('Item não encontrado');\n      }\n      return data;\n    } catch (error) {\n      console.error('Erro ao buscar item:', error.message);\n      throw error;\n    }\n  },\n  async getRecommendations() {\n    try {\n      const {\n        data\n      } = await api.get('/api/random');\n      return data || [];\n    } catch (error) {\n      console.error('Erro ao buscar recomendações:', error.message);\n      return [];\n    }\n  },\n  async getRecentContent() {\n    try {\n      const {\n        data\n      } = await api.get('/api/recent');\n      return data || [];\n    } catch (error) {\n      console.error('Erro ao buscar conteúdo recente:', error.message);\n      return [];\n    }\n  },\n  async searchContent(query) {\n    try {\n      const {\n        data\n      } = await api.get(`/api/search?q=${encodeURIComponent(query)}`);\n      return data || [];\n    } catch (error) {\n      console.error('Erro ao buscar conteúdo:', error.message);\n      return [];\n    }\n  }\n};\nexport const amigoService = {\n  async enviarSolicitacao(email) {\n    try {\n      console.log('Tentando enviar solicitação para:', email);\n      const response = await api.post('/api/auth/amizade/solicitar', {\n        email\n      }, {\n        timeout: 2000 // Timeout específico para esta requisição\n      });\n      console.log('Resposta do servidor:', response.data);\n      if (!response.data.success) {\n        throw new Error(response.data.message || 'Erro ao enviar solicitação');\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response8, _error$response8$data;\n      console.error('Erro detalhado:', ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error);\n\n      // Melhorar tratamento de erro\n      const errorMessage = ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || error.message;\n      throw new Error(errorMessage);\n    }\n  },\n  async responderSolicitacao(solicitacaoId, aceitar) {\n    try {\n      const {\n        data\n      } = await api.post('/api/auth/amizade/responder', {\n        solicitacaoId,\n        aceitar\n      });\n      return data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Erro ao responder solicitação';\n    }\n  },\n  async listarAmigos() {\n    try {\n      const {\n        data\n      } = await api.get('/api/auth/amigos');\n      return data;\n    } catch (error) {\n      console.error('Erro ao listar amigos:', error);\n      return [];\n    }\n  },\n  async listarSolicitacoes() {\n    try {\n      const {\n        data\n      } = await api.get('/api/auth/amizade/solicitacoes');\n      return data;\n    } catch (error) {\n      console.error('Erro ao listar solicitações:', error);\n      return [];\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","adjustBrightness","getBaseUrl","hostname","window","location","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","withCredentials","retry","retryDelay","retryCount","interceptors","response","use","error","config","Promise","reject","resolve","setTimeout","request","token","localStorage","getItem","Authorization","_error$config","_error$config$url","_error$response","_error$response2","_error$response2$data","_error$config2","console","message","Error","status","url","includes","temaAtual","document","documentElement","style","getPropertyValue","setItem","code","data","authService","login","email","senha","log","post","toLowerCase","trim","success","JSON","stringify","user","tema_cor","userColor","setProperty","_error$response3","_error$response4","_error$response4$data","register","nome","toggleFavorite","conteudoId","tipo","conteudo_id","replace","favorites","parse","isFavorito","push","index","indexOf","splice","_error$response5","getFavorites","get","Array","isArray","map","fav","isFavorited","getUserProfile","getPublicProfile","userId","profileData","favoritosData","all","favoritos","updateUserProfile","foto","length","put","currentUser","updatedUser","_error$response6","_error$response6$data","changePassword","senhaAtual","novaSenha","senha_atual","nova_senha","contentService","_cache","Map","_cacheTimeout","getFromCacheOrFetch","key","fetchFn","cached","Date","now","timestamp","set","id","getRecommendations","getRecentContent","searchContent","query","encodeURIComponent","amigoService","enviarSolicitacao","_error$response7","_error$response8","_error$response8$data","errorMessage","responderSolicitacao","solicitacaoId","aceitar","_error$response9","_error$response9$data","listarAmigos","listarSolicitacoes"],"sources":["C:/Users/Caio/Documents/GitHub/Projetos-publicos/GeekCore/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { adjustBrightness } from '../utils/themeUtils';\r\n\r\nconst getBaseUrl = () => {\r\n  const hostname = window.location.hostname;\r\n  return process.env.REACT_APP_API_URL || `http://${hostname}:3001`;\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: getBaseUrl(),\r\n  timeout: 3000, // Reduzido de 5000 para 3000ms\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  },\r\n  withCredentials: true,\r\n  retry: 1, // Reduzido de 3 para 1 retry\r\n  retryDelay: (retryCount) => retryCount * 500 // Reduzido delay entre retries\r\n});\r\n\r\n// Adicionar interceptor de retry\r\napi.interceptors.response.use(null, async (error) => {\r\n  const { config } = error;\r\n  if (!config || !config.retry) {\r\n    return Promise.reject(error);\r\n  }\r\n  \r\n  config.retryCount = config.retryCount || 0;\r\n  \r\n  if (config.retryCount >= config.retry) {\r\n    return Promise.reject(error);\r\n  }\r\n  \r\n  config.retryCount += 1;\r\n  await new Promise(resolve => setTimeout(resolve, config.retryDelay(config.retryCount)));\r\n  return api(config);\r\n});\r\n\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Melhorar o interceptor de erro\r\napi.interceptors.response.use(\r\n  response => response,\r\n  async error => {\r\n    if (!error.response) {\r\n      console.error('Erro de rede:', error.message);\r\n      throw new Error('Servidor indisponível. Verifique sua conexão.');\r\n    }\r\n\r\n    if (error.response.status === 503) {\r\n      console.error('Servidor em manutenção');\r\n      throw new Error('Servidor em manutenção. Tente novamente em alguns instantes.');\r\n    }\r\n\r\n    // Preservar cor do tema somente se não for logout\r\n    if (!error.config?.url?.includes('/logout')) {\r\n      const temaAtual = document.documentElement.style.getPropertyValue('--color-primary');\r\n      if (temaAtual) {\r\n        localStorage.setItem('tema_cor', temaAtual);\r\n      }\r\n    }\r\n\r\n    if (error.code === 'ERR_NETWORK') {\r\n      console.error('Erro de conexão - Servidor está rodando?');\r\n      // Tentar reconectar\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve(api(error.config));\r\n        }, 3000);\r\n      });\r\n    }\r\n    \r\n    console.error('API Error:', {\r\n      status: error.response?.status,\r\n      message: error.response?.data?.message || error.message,\r\n      url: error.config?.url\r\n    });\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  async login(email, senha) {\r\n    try {\r\n      console.log('Tentando login com:', { email });\r\n\r\n      const response = await api.post('/api/auth/login', { \r\n        email: email.toLowerCase().trim(),\r\n        senha: senha\r\n      });\r\n\r\n      const { data } = response;\r\n      console.log('Resposta do servidor:', data);\r\n\r\n      if (data.success && data.token) {\r\n        localStorage.setItem('token', data.token);\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n        \r\n        // Aplicar tema do usuário se existir\r\n        if (data.user.tema_cor) {\r\n          const userColor = data.user.tema_cor;\r\n          document.documentElement.style.setProperty('--color-primary', userColor);\r\n          document.documentElement.style.setProperty('--color-hover', adjustBrightness(userColor, -15));\r\n        }\r\n        \r\n        return data;\r\n      }\r\n      \r\n      throw new Error(data.message || 'Erro ao fazer login');\r\n    } catch (error) {\r\n      console.error('Erro de login:', error.response?.data || error);\r\n      throw new Error(\r\n        error.response?.data?.message || \r\n        error.message || \r\n        'Email ou senha inválidos'\r\n      );\r\n    }\r\n  },\r\n\r\n  async register(nome, email, senha) {\r\n    const { data } = await api.post('/api/auth/register', { nome, email, senha });\r\n    return data;\r\n  },\r\n\r\n  async toggleFavorite(conteudoId, tipo) {\r\n    try {\r\n      if (!conteudoId || !tipo) {\r\n        throw new Error('ID do conteúdo e tipo são obrigatórios');\r\n      }\r\n\r\n      const { data } = await api.post('/api/auth/favoritos', {\r\n        conteudo_id: conteudoId,\r\n        tipo: tipo.toLowerCase().replace('s', '')\r\n      });\r\n\r\n      // Atualizar o localStorage com o novo estado\r\n      const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');\r\n      if (data.isFavorito) {\r\n        favorites.push(conteudoId);\r\n      } else {\r\n        const index = favorites.indexOf(conteudoId);\r\n        if (index > -1) favorites.splice(index, 1);\r\n      }\r\n      localStorage.setItem('favorites', JSON.stringify(favorites));\r\n\r\n      return {\r\n        ...data,\r\n        isFavorito: data.isFavorito,\r\n        message: data.isFavorito \r\n          ? 'Item adicionado aos favoritos!' \r\n          : 'Item removido dos favoritos!'\r\n      };\r\n    } catch (error) {\r\n      console.error('Detalhes do erro:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getFavorites() {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) return [];\r\n\r\n      const { data } = await api.get('/api/auth/favoritos');\r\n      \r\n      // Garantir que todos os itens retornados tenham a propriedade isFavorited como true\r\n      return Array.isArray(data) ? data.map(fav => ({\r\n        ...fav,\r\n        isFavorited: true\r\n      })) : [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar favoritos:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async getUserProfile() {\r\n    const { data } = await api.get('/api/auth/perfil');\r\n    \r\n    // Salvar a cor do tema no localStorage para uso global\r\n    if (data.tema_cor) {\r\n      localStorage.setItem('tema_cor', data.tema_cor);\r\n    }\r\n    \r\n    return data;\r\n  },\r\n\r\n  async getPublicProfile(userId) {\r\n    try {\r\n      const [profileData, favoritosData] = await Promise.all([\r\n        api.get(`/api/auth/perfil/${userId}`),\r\n        api.get(`/api/auth/favoritos/${userId}`)\r\n      ]);\r\n\r\n      return {\r\n        ...profileData.data,\r\n        favoritos: Array.isArray(favoritosData.data) ? favoritosData.data : []\r\n      };\r\n    } catch (error) {\r\n      console.error('Erro ao buscar perfil:', error);\r\n      return {\r\n        ...profileData.data,\r\n        favoritos: []\r\n      };\r\n    }\r\n  },\r\n\r\n  async updateUserProfile(profileData) {\r\n    try {\r\n      if (profileData.foto && profileData.foto.length > 2 * 1024 * 1024) {\r\n        throw new Error('Imagem muito grande. Máximo: 2MB');\r\n      }\r\n\r\n      const { data } = await api.put('/api/auth/perfil', profileData);\r\n      \r\n      // Atualizar user no localStorage\r\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\r\n      const updatedUser = { ...currentUser, ...data.user };\r\n      \r\n      // Garantir que a cor do tema seja salva\r\n      if (profileData.tema_cor) {\r\n        updatedUser.tema_cor = profileData.tema_cor;\r\n        localStorage.setItem('userThemeColor', profileData.tema_cor);\r\n        \r\n        // Atualizar as variáveis CSS\r\n        document.documentElement.style.setProperty('--color-primary', profileData.tema_cor);\r\n        document.documentElement.style.setProperty('--color-hover', adjustBrightness(profileData.tema_cor, -15));\r\n      }\r\n      \r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      \r\n      return {\r\n        ...data,\r\n        user: updatedUser\r\n      };\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar perfil:', error);\r\n      throw error.response?.data?.message || error.message || 'Erro ao atualizar perfil';\r\n    }\r\n  },\r\n\r\n  async changePassword(senhaAtual, novaSenha) {\r\n    try {\r\n      const { data } = await api.post('/api/auth/change-password', {\r\n        senha_atual: senhaAtual,\r\n        nova_senha: novaSenha\r\n      });\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport const contentService = {\r\n  // Cache para armazenar resultados recentes\r\n  _cache: new Map(),\r\n  _cacheTimeout: 5 * 60 * 1000, // 5 minutos\r\n\r\n  async getFromCacheOrFetch(key, fetchFn) {\r\n    const cached = this._cache.get(key);\r\n    if (cached && Date.now() - cached.timestamp < this._cacheTimeout) {\r\n      return cached.data;\r\n    }\r\n    const data = await fetchFn();\r\n    this._cache.set(key, { data, timestamp: Date.now() });\r\n    return data;\r\n  },\r\n\r\n  async getItem(id) {\r\n    try {\r\n      if (!id) {\r\n        throw new Error('ID inválido');\r\n      }\r\n\r\n      const { data } = await api.get(`/api/item/${id}`);\r\n      if (!data) {\r\n        throw new Error('Item não encontrado');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar item:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getRecommendations() {\r\n    try {\r\n      const { data } = await api.get('/api/random');\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar recomendações:', error.message);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async getRecentContent() {\r\n    try {\r\n      const { data } = await api.get('/api/recent');\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar conteúdo recente:', error.message);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async searchContent(query) {\r\n    try {\r\n      const { data } = await api.get(`/api/search?q=${encodeURIComponent(query)}`);\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar conteúdo:', error.message);\r\n      return [];\r\n    }\r\n  }\r\n};\r\n\r\nexport const amigoService = {\r\n  async enviarSolicitacao(email) {\r\n    try {\r\n      console.log('Tentando enviar solicitação para:', email);\r\n      const response = await api.post('/api/auth/amizade/solicitar', { email }, {\r\n        timeout: 2000 // Timeout específico para esta requisição\r\n      });\r\n      \r\n      console.log('Resposta do servidor:', response.data);\r\n      \r\n      if (!response.data.success) {\r\n        throw new Error(response.data.message || 'Erro ao enviar solicitação');\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro detalhado:', error.response?.data || error);\r\n      \r\n      // Melhorar tratamento de erro\r\n      const errorMessage = error.response?.data?.message || error.message;\r\n      throw new Error(errorMessage);\r\n    }\r\n  },\r\n\r\n  async responderSolicitacao(solicitacaoId, aceitar) {\r\n    try {\r\n      const { data } = await api.post('/api/auth/amizade/responder', { \r\n        solicitacaoId, \r\n        aceitar \r\n      });\r\n      return data;\r\n    } catch (error) {\r\n      throw error.response?.data?.message || 'Erro ao responder solicitação';\r\n    }\r\n  },\r\n\r\n  async listarAmigos() {\r\n    try {\r\n      const { data } = await api.get('/api/auth/amigos');\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erro ao listar amigos:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async listarSolicitacoes() {\r\n    try {\r\n      const { data } = await api.get('/api/auth/amizade/solicitacoes');\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erro ao listar solicitações:', error);\r\n      return [];\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}