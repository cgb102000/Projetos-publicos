{"ast":null,"code":"import axios from 'axios';\nconst getBaseUrl = () => {\n  const hostname = window.location.hostname;\n  return process.env.REACT_APP_API_URL || `http://${hostname}:3001`;\n};\nconst api = axios.create({\n  baseURL: getBaseUrl(),\n  timeout: 60000,\n  // Aumentar timeout para 60 segundos\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true,\n  maxContentLength: Infinity,\n  maxBodyLength: Infinity\n});\n\n// Adicionar interceptador para compressão de imagens\napi.interceptors.request.use(async config => {\n  if (config.data && (config.data.foto_capa || config.data.foto)) {\n    const compressImage = async (base64Str, maxSizeMB) => {\n      if (!base64Str || !base64Str.startsWith('data:image')) return base64Str;\n      const imageFile = await fetch(base64Str).then(res => res.blob());\n      const options = {\n        maxSizeMB: maxSizeMB,\n        maxWidthOrHeight: 2048,\n        useWebWorker: true\n      };\n      try {\n        const compressedFile = await imageCompression(imageFile, options);\n        return new Promise(resolve => {\n          const reader = new FileReader();\n          reader.onloadend = () => resolve(reader.result);\n          reader.readAsDataURL(compressedFile);\n        });\n      } catch (err) {\n        console.error('Erro ao comprimir imagem:', err);\n        return base64Str;\n      }\n    };\n    if (config.data.foto) {\n      config.data.foto = await compressImage(config.data.foto, 2);\n    }\n    if (config.data.foto_capa) {\n      config.data.foto_capa = await compressImage(config.data.foto_capa, 10);\n    }\n  }\n  return config;\n});\n\n// Adicionar manipulador de progresso para uploads grandes\napi.interceptors.request.use(config => {\n  if (config.data && (config.data.foto_capa || config.data.foto)) {\n    config.onUploadProgress = progressEvent => {\n      const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n      console.log(`Upload progress: ${percentCompleted}%`);\n    };\n  }\n  return config;\n});\n\n// Adicionar interceptor de retry\napi.interceptors.response.use(null, async error => {\n  const {\n    config\n  } = error;\n  if (!config || !config.retry) {\n    return Promise.reject(error);\n  }\n  config.retryCount = config.retryCount || 0;\n  if (config.retryCount >= config.retry) {\n    return Promise.reject(error);\n  }\n  config.retryCount += 1;\n  await new Promise(resolve => setTimeout(resolve, config.retryDelay(config.retryCount)));\n  return api(config);\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Melhorar o interceptor de erro\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response2, _error$response2$data, _error$config;\n  if (!error.response) {\n    console.error('Erro de rede:', error.message);\n    throw new Error('Servidor indisponível. Verifique sua conexão.');\n  }\n  if (error.response.status === 503) {\n    console.error('Servidor em manutenção');\n    throw new Error('Servidor em manutenção. Tente novamente em alguns instantes.');\n  }\n  if (error.code === 'ERR_NETWORK') {\n    console.error('Erro de conexão - Servidor está rodando?');\n    // Tentar reconectar\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(api(error.config));\n      }, 3000);\n    });\n  }\n  console.error('API Error:', {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url\n  });\n  return Promise.reject(error);\n});\nexport const authService = {\n  async login(email, senha) {\n    try {\n      console.log('Tentando login com:', {\n        email\n      }); // Log para debug\n\n      const {\n        data\n      } = await api.post('/api/auth/login', {\n        email: email.toLowerCase().trim(),\n        senha: senha\n      });\n      console.log('Resposta do servidor:', data); // Log para debug\n\n      if (data.success && data.token) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        return data;\n      }\n      throw new Error(data.message || 'Erro ao fazer login');\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response4$data;\n      console.error('Erro de login:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Erro ao fazer login');\n    }\n  },\n  async register(nome, email, senha) {\n    const {\n      data\n    } = await api.post('/api/auth/register', {\n      nome,\n      email,\n      senha\n    });\n    return data;\n  },\n  async toggleFavorite(conteudoId, tipo) {\n    try {\n      // Garantir tipo normalizado\n      const normalizedTipo = tipo.toLowerCase().replace(/s$/, '');\n      console.log('Enviando requisição de favorito:', {\n        conteudo_id: conteudoId,\n        tipo: normalizedTipo\n      });\n      const response = await api.post('/api/auth/favoritos', {\n        conteudo_id: conteudoId,\n        tipo: normalizedTipo\n      });\n      console.log('Resposta do servidor:', response.data);\n      return {\n        success: true,\n        isFavorito: response.data.isFavorito,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response5;\n      console.error('Erro ao favoritar:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n      throw error;\n    }\n  },\n  async getFavorites() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return [];\n      const {\n        data\n      } = await api.get('/api/auth/favoritos');\n      return Array.isArray(data) ? data.map(item => ({\n        ...item,\n        tipo: item.tipo || (item.collection === 'animes' ? 'anime' : 'filme'),\n        collection: item.collection || (item.tipo === 'anime' ? 'animes' : 'filmes'),\n        isFavorito: true,\n        isFavorited: true\n      })) : [];\n    } catch (error) {\n      console.error('Erro ao buscar favoritos:', error);\n      return [];\n    }\n  },\n  async getUserProfile() {\n    const {\n      data\n    } = await api.get('/api/auth/perfil');\n    return data;\n  },\n  async updateUserProfile(userData) {\n    try {\n      const dataToSend = {\n        nome: userData.nome,\n        descricao: userData.descricao,\n        foto: userData.foto,\n        foto_capa: userData.foto_capa || userData.capa,\n        // Garantir que usa o campo correto\n        tema_cor: userData.tema_cor\n      };\n      const response = await api.put('/api/auth/perfil', dataToSend);\n\n      // Atualizar localStorage mantendo consistência dos campos\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n      const updatedUser = {\n        ...currentUser,\n        ...response.data.user,\n        foto_capa: response.data.user.foto_capa // Garantir que o campo foto_capa é preservado\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 413) {\n        const field = error.response.data.field;\n        const message = field === 'foto_capa' ? 'A imagem da capa é muito grande. O tamanho máximo permitido é 50MB.' : 'A imagem do perfil é muito grande. O tamanho máximo permitido é 2MB.';\n        throw new Error(message);\n      }\n      console.error('Erro ao atualizar perfil:', error);\n      throw error;\n    }\n  },\n  async changePassword(senhaAtual, novaSenha) {\n    try {\n      const {\n        data\n      } = await api.post('/api/auth/change-password', {\n        senha_atual: senhaAtual,\n        nova_senha: novaSenha\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport const contentService = {\n  // Cache para armazenar resultados recentes\n  _cache: new Map(),\n  _cacheTimeout: 5 * 60 * 1000,\n  // 5 minutos\n\n  async getFromCacheOrFetch(key, fetchFn) {\n    const cached = this._cache.get(key);\n    if (cached && Date.now() - cached.timestamp < this._cacheTimeout) {\n      return cached.data;\n    }\n    const data = await fetchFn();\n    this._cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n    return data;\n  },\n  async getRecentContent() {\n    try {\n      await api.get('/api/health');\n      const {\n        data\n      } = await api.get('/api/recent');\n      if (!Array.isArray(data)) return [];\n\n      // Buscar favoritos se o usuário estiver autenticado\n      let favoritos = [];\n      const token = localStorage.getItem('token');\n      if (token) {\n        favoritos = await authService.getFavorites();\n      }\n      return data.map(item => ({\n        ...item,\n        tipo: item.tipo || (item.collection === 'animes' ? 'anime' : 'filme'),\n        collection: item.collection || (item.tipo === 'anime' ? 'animes' : 'filmes'),\n        isFavorited: favoritos.some(fav => fav.conteudo_id === item._id || fav._id === item._id)\n      }));\n    } catch (error) {\n      console.error('Erro ao buscar conteúdo recente:', error);\n      return [];\n    }\n  },\n  async searchContent(query) {\n    const {\n      data\n    } = await api.get(`/api/search?q=${encodeURIComponent(query)}`);\n    return data;\n  },\n  async getItem(collection, id) {\n    try {\n      if (!id) throw new Error('ID é obrigatório');\n      const collections = ['animes', 'filmes'];\n      let item = null;\n      let error = null;\n\n      // Tentar buscar em ambas as collections se necessário\n      for (const col of collections) {\n        try {\n          const {\n            data\n          } = await api.get(`/api/item/${col}/${id}`);\n          if (data) {\n            item = {\n              ...data,\n              collection: data.collection || col,\n              tipo: data.collection === 'animes' ? 'anime' : 'filme'\n            };\n            break;\n          }\n        } catch (err) {\n          error = err;\n        }\n      }\n      if (!item) {\n        throw error || new Error('Item não encontrado');\n      }\n      return item;\n    } catch (error) {\n      console.error('Erro ao buscar item:', error.message);\n      throw error;\n    }\n  },\n  async getItemFromCollection(collection, id) {\n    try {\n      const {\n        data\n      } = await api.get(`/api/item/${collection}/${id}`);\n      if (!data) return null;\n\n      // Garantir que os campos collection e tipo estejam corretos\n      const normalizedCollection = data.collection || collection;\n      const normalizedTipo = normalizedCollection === 'animes' ? 'anime' : 'filme';\n      return {\n        ...data,\n        collection: normalizedCollection,\n        tipo: normalizedTipo\n      };\n    } catch (error) {\n      console.error(`Erro ao buscar item na coleção ${collection}:`, error);\n      return null;\n    }\n  },\n  async getRecommendations(collection) {\n    try {\n      // Buscar recomendações da mesma coleção e da outra coleção\n      const otherCollection = collection === 'animes' ? 'filmes' : 'animes';\n      const [sameCollectionData, otherCollectionData] = await Promise.all([api.get(`/api/random/${collection}?limit=6`), api.get(`/api/random/${otherCollection}?limit=6`)]);\n      let recommendations = [...(sameCollectionData.data || []).map(item => ({\n        ...item,\n        collection: collection,\n        tipo: collection === 'animes' ? 'anime' : 'filme'\n      })), ...(otherCollectionData.data || []).map(item => ({\n        ...item,\n        collection: otherCollection,\n        tipo: otherCollection === 'animes' ? 'anime' : 'filme'\n      }))];\n\n      // Buscar favoritos se o usuário estiver autenticado\n      let favoritos = [];\n      const token = localStorage.getItem('token');\n      if (token) {\n        favoritos = await authService.getFavorites();\n      }\n\n      // Adicionar estado de favorito\n      recommendations = recommendations.map(item => ({\n        ...item,\n        isFavorited: favoritos.some(fav => fav.conteudo_id === item._id || fav._id === item._id)\n      }));\n      return recommendations;\n    } catch (error) {\n      console.error('Erro ao buscar recomendações:', error.message);\n      return [];\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","getBaseUrl","hostname","window","location","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","withCredentials","maxContentLength","Infinity","maxBodyLength","interceptors","request","use","config","data","foto_capa","foto","compressImage","base64Str","maxSizeMB","startsWith","imageFile","fetch","then","res","blob","options","maxWidthOrHeight","useWebWorker","compressedFile","imageCompression","Promise","resolve","reader","FileReader","onloadend","result","readAsDataURL","err","console","error","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","log","response","retry","reject","retryCount","setTimeout","retryDelay","token","localStorage","getItem","Authorization","_error$response","_error$response2","_error$response2$data","_error$config","message","Error","status","code","url","authService","login","email","senha","post","toLowerCase","trim","success","setItem","JSON","stringify","user","_error$response3","_error$response4","_error$response4$data","register","nome","toggleFavorite","conteudoId","tipo","normalizedTipo","replace","conteudo_id","isFavorito","_error$response5","getFavorites","get","Array","isArray","map","item","collection","isFavorited","getUserProfile","updateUserProfile","userData","dataToSend","descricao","capa","tema_cor","put","currentUser","parse","updatedUser","_error$response6","field","changePassword","senhaAtual","novaSenha","senha_atual","nova_senha","contentService","_cache","Map","_cacheTimeout","getFromCacheOrFetch","key","fetchFn","cached","Date","now","timestamp","set","getRecentContent","favoritos","some","fav","_id","searchContent","query","encodeURIComponent","id","collections","col","getItemFromCollection","normalizedCollection","getRecommendations","otherCollection","sameCollectionData","otherCollectionData","all","recommendations"],"sources":["C:/Users/Caio/Documents/GitHub/Projetos-publicos/GeekCore/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst getBaseUrl = () => {\r\n  const hostname = window.location.hostname;\r\n  return process.env.REACT_APP_API_URL || `http://${hostname}:3001`;\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: getBaseUrl(),\r\n  timeout: 60000, // Aumentar timeout para 60 segundos\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  },\r\n  withCredentials: true,\r\n  maxContentLength: Infinity,\r\n  maxBodyLength: Infinity\r\n});\r\n\r\n// Adicionar interceptador para compressão de imagens\r\napi.interceptors.request.use(async config => {\r\n  if (config.data && (config.data.foto_capa || config.data.foto)) {\r\n    const compressImage = async (base64Str, maxSizeMB) => {\r\n      if (!base64Str || !base64Str.startsWith('data:image')) return base64Str;\r\n      \r\n      const imageFile = await fetch(base64Str)\r\n        .then(res => res.blob());\r\n        \r\n      const options = {\r\n        maxSizeMB: maxSizeMB,\r\n        maxWidthOrHeight: 2048,\r\n        useWebWorker: true\r\n      };\r\n      \r\n      try {\r\n        const compressedFile = await imageCompression(imageFile, options);\r\n        return new Promise((resolve) => {\r\n          const reader = new FileReader();\r\n          reader.onloadend = () => resolve(reader.result);\r\n          reader.readAsDataURL(compressedFile);\r\n        });\r\n      } catch (err) {\r\n        console.error('Erro ao comprimir imagem:', err);\r\n        return base64Str;\r\n      }\r\n    };\r\n\r\n    if (config.data.foto) {\r\n      config.data.foto = await compressImage(config.data.foto, 2);\r\n    }\r\n    if (config.data.foto_capa) {\r\n      config.data.foto_capa = await compressImage(config.data.foto_capa, 10);\r\n    }\r\n  }\r\n  \r\n  return config;\r\n});\r\n\r\n// Adicionar manipulador de progresso para uploads grandes\r\napi.interceptors.request.use(config => {\r\n  if (config.data && (config.data.foto_capa || config.data.foto)) {\r\n    config.onUploadProgress = progressEvent => {\r\n      const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n      console.log(`Upload progress: ${percentCompleted}%`);\r\n    };\r\n  }\r\n  return config;\r\n});\r\n\r\n// Adicionar interceptor de retry\r\napi.interceptors.response.use(null, async (error) => {\r\n  const { config } = error;\r\n  if (!config || !config.retry) {\r\n    return Promise.reject(error);\r\n  }\r\n  \r\n  config.retryCount = config.retryCount || 0;\r\n  \r\n  if (config.retryCount >= config.retry) {\r\n    return Promise.reject(error);\r\n  }\r\n  \r\n  config.retryCount += 1;\r\n  await new Promise(resolve => setTimeout(resolve, config.retryDelay(config.retryCount)));\r\n  return api(config);\r\n});\r\n\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Melhorar o interceptor de erro\r\napi.interceptors.response.use(\r\n  response => response,\r\n  async error => {\r\n    if (!error.response) {\r\n      console.error('Erro de rede:', error.message);\r\n      throw new Error('Servidor indisponível. Verifique sua conexão.');\r\n    }\r\n\r\n    if (error.response.status === 503) {\r\n      console.error('Servidor em manutenção');\r\n      throw new Error('Servidor em manutenção. Tente novamente em alguns instantes.');\r\n    }\r\n\r\n    if (error.code === 'ERR_NETWORK') {\r\n      console.error('Erro de conexão - Servidor está rodando?');\r\n      // Tentar reconectar\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve(api(error.config));\r\n        }, 3000);\r\n      });\r\n    }\r\n    \r\n    console.error('API Error:', {\r\n      status: error.response?.status,\r\n      message: error.response?.data?.message || error.message,\r\n      url: error.config?.url\r\n    });\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  async login(email, senha) {\r\n    try {\r\n      console.log('Tentando login com:', { email }); // Log para debug\r\n\r\n      const { data } = await api.post('/api/auth/login', { \r\n        email: email.toLowerCase().trim(),\r\n        senha: senha\r\n      });\r\n\r\n      console.log('Resposta do servidor:', data); // Log para debug\r\n\r\n      if (data.success && data.token) {\r\n        localStorage.setItem('token', data.token);\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n        return data;\r\n      }\r\n      \r\n      throw new Error(data.message || 'Erro ao fazer login');\r\n    } catch (error) {\r\n      console.error('Erro de login:', error.response?.data || error);\r\n      throw new Error(error.response?.data?.message || 'Erro ao fazer login');\r\n    }\r\n  },\r\n\r\n  async register(nome, email, senha) {\r\n    const { data } = await api.post('/api/auth/register', { nome, email, senha });\r\n    return data;\r\n  },\r\n\r\n  async toggleFavorite(conteudoId, tipo) {\r\n    try {\r\n      // Garantir tipo normalizado\r\n      const normalizedTipo = tipo.toLowerCase().replace(/s$/, '');\r\n      \r\n      console.log('Enviando requisição de favorito:', {\r\n        conteudo_id: conteudoId,\r\n        tipo: normalizedTipo\r\n      });\r\n\r\n      const response = await api.post('/api/auth/favoritos', {\r\n        conteudo_id: conteudoId,\r\n        tipo: normalizedTipo\r\n      });\r\n\r\n      console.log('Resposta do servidor:', response.data);\r\n\r\n      return {\r\n        success: true,\r\n        isFavorito: response.data.isFavorito,\r\n        message: response.data.message\r\n      };\r\n    } catch (error) {\r\n      console.error('Erro ao favoritar:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getFavorites() {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) return [];\r\n\r\n      const { data } = await api.get('/api/auth/favoritos');\r\n      \r\n      return Array.isArray(data) ? data.map(item => ({\r\n        ...item,\r\n        tipo: item.tipo || (item.collection === 'animes' ? 'anime' : 'filme'),\r\n        collection: item.collection || (item.tipo === 'anime' ? 'animes' : 'filmes'),\r\n        isFavorito: true,\r\n        isFavorited: true\r\n      })) : [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar favoritos:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async getUserProfile() {\r\n    const { data } = await api.get('/api/auth/perfil');\r\n    return data;\r\n  },\r\n\r\n  async updateUserProfile(userData) {\r\n    try {\r\n      const dataToSend = {\r\n        nome: userData.nome,\r\n        descricao: userData.descricao,\r\n        foto: userData.foto,\r\n        foto_capa: userData.foto_capa || userData.capa, // Garantir que usa o campo correto\r\n        tema_cor: userData.tema_cor\r\n      };\r\n\r\n      const response = await api.put('/api/auth/perfil', dataToSend);\r\n      \r\n      // Atualizar localStorage mantendo consistência dos campos\r\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\r\n      const updatedUser = { \r\n        ...currentUser, \r\n        ...response.data.user,\r\n        foto_capa: response.data.user.foto_capa // Garantir que o campo foto_capa é preservado\r\n      };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.response?.status === 413) {\r\n        const field = error.response.data.field;\r\n        const message = field === 'foto_capa' \r\n          ? 'A imagem da capa é muito grande. O tamanho máximo permitido é 50MB.'\r\n          : 'A imagem do perfil é muito grande. O tamanho máximo permitido é 2MB.';\r\n        throw new Error(message);\r\n      }\r\n      console.error('Erro ao atualizar perfil:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async changePassword(senhaAtual, novaSenha) {\r\n    try {\r\n      const { data } = await api.post('/api/auth/change-password', {\r\n        senha_atual: senhaAtual,\r\n        nova_senha: novaSenha\r\n      });\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport const contentService = {\r\n  // Cache para armazenar resultados recentes\r\n  _cache: new Map(),\r\n  _cacheTimeout: 5 * 60 * 1000, // 5 minutos\r\n\r\n  async getFromCacheOrFetch(key, fetchFn) {\r\n    const cached = this._cache.get(key);\r\n    if (cached && Date.now() - cached.timestamp < this._cacheTimeout) {\r\n      return cached.data;\r\n    }\r\n    const data = await fetchFn();\r\n    this._cache.set(key, { data, timestamp: Date.now() });\r\n    return data;\r\n  },\r\n\r\n  async getRecentContent() {\r\n    try {\r\n      await api.get('/api/health');\r\n      const { data } = await api.get('/api/recent');\r\n      \r\n      if (!Array.isArray(data)) return [];\r\n\r\n      // Buscar favoritos se o usuário estiver autenticado\r\n      let favoritos = [];\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        favoritos = await authService.getFavorites();\r\n      }\r\n\r\n      return data.map(item => ({\r\n        ...item,\r\n        tipo: item.tipo || (item.collection === 'animes' ? 'anime' : 'filme'),\r\n        collection: item.collection || (item.tipo === 'anime' ? 'animes' : 'filmes'),\r\n        isFavorited: favoritos.some(fav => \r\n          fav.conteudo_id === item._id || fav._id === item._id\r\n        )\r\n      }));\r\n    } catch (error) {\r\n      console.error('Erro ao buscar conteúdo recente:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async searchContent(query) {\r\n    const { data } = await api.get(`/api/search?q=${encodeURIComponent(query)}`);\r\n    return data;\r\n  },\r\n\r\n  async getItem(collection, id) {\r\n    try {\r\n      if (!id) throw new Error('ID é obrigatório');\r\n\r\n      const collections = ['animes', 'filmes'];\r\n      let item = null;\r\n      let error = null;\r\n\r\n      // Tentar buscar em ambas as collections se necessário\r\n      for (const col of collections) {\r\n        try {\r\n          const { data } = await api.get(`/api/item/${col}/${id}`);\r\n          if (data) {\r\n            item = {\r\n              ...data,\r\n              collection: data.collection || col,\r\n              tipo: data.collection === 'animes' ? 'anime' : 'filme'\r\n            };\r\n            break;\r\n          }\r\n        } catch (err) {\r\n          error = err;\r\n        }\r\n      }\r\n\r\n      if (!item) {\r\n        throw error || new Error('Item não encontrado');\r\n      }\r\n\r\n      return item;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar item:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getItemFromCollection(collection, id) {\r\n    try {\r\n      const { data } = await api.get(`/api/item/${collection}/${id}`);\r\n      if (!data) return null;\r\n\r\n      // Garantir que os campos collection e tipo estejam corretos\r\n      const normalizedCollection = data.collection || collection;\r\n      const normalizedTipo = normalizedCollection === 'animes' ? 'anime' : 'filme';\r\n\r\n      return {\r\n        ...data,\r\n        collection: normalizedCollection,\r\n        tipo: normalizedTipo\r\n      };\r\n    } catch (error) {\r\n      console.error(`Erro ao buscar item na coleção ${collection}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  async getRecommendations(collection) {\r\n    try {\r\n      // Buscar recomendações da mesma coleção e da outra coleção\r\n      const otherCollection = collection === 'animes' ? 'filmes' : 'animes';\r\n      \r\n      const [sameCollectionData, otherCollectionData] = await Promise.all([\r\n        api.get(`/api/random/${collection}?limit=6`),\r\n        api.get(`/api/random/${otherCollection}?limit=6`)\r\n      ]);\r\n\r\n      let recommendations = [\r\n        ...(sameCollectionData.data || []).map(item => ({\r\n          ...item,\r\n          collection: collection,\r\n          tipo: collection === 'animes' ? 'anime' : 'filme'\r\n        })),\r\n        ...(otherCollectionData.data || []).map(item => ({\r\n          ...item,\r\n          collection: otherCollection,\r\n          tipo: otherCollection === 'animes' ? 'anime' : 'filme'\r\n        }))\r\n      ];\r\n\r\n      // Buscar favoritos se o usuário estiver autenticado\r\n      let favoritos = [];\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        favoritos = await authService.getFavorites();\r\n      }\r\n\r\n      // Adicionar estado de favorito\r\n      recommendations = recommendations.map(item => ({\r\n        ...item,\r\n        isFavorited: favoritos.some(fav => \r\n          fav.conteudo_id === item._id || fav._id === item._id\r\n        )\r\n      }));\r\n\r\n      return recommendations;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar recomendações:', error.message);\r\n      return [];\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}