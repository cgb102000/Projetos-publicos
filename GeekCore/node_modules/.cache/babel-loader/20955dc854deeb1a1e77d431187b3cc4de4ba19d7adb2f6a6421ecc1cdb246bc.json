{"ast":null,"code":"import axios from 'axios';\nconst getBaseUrl = () => {\n  const hostname = window.location.hostname;\n  return process.env.REACT_APP_API_URL || `http://${hostname}:3001`;\n};\nconst api = axios.create({\n  baseURL: getBaseUrl(),\n  timeout: 30000,\n  // Aumentar timeout para 30 segundos\n  withCredentials: true,\n  // Adicionar retry em caso de falha\n  retry: 3,\n  retryDelay: retryCount => retryCount * 1000\n});\n\n// Adicionar interceptor de retry\napi.interceptors.response.use(null, async error => {\n  const {\n    config\n  } = error;\n  if (!config || !config.retry) {\n    return Promise.reject(error);\n  }\n  config.retryCount = config.retryCount || 0;\n  if (config.retryCount >= config.retry) {\n    return Promise.reject(error);\n  }\n  config.retryCount += 1;\n  await new Promise(resolve => setTimeout(resolve, config.retryDelay(config.retryCount)));\n  return api(config);\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Melhorar o interceptor de erro\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$response2$data, _error$config;\n  if (error.code === 'ERR_NETWORK') {\n    console.error('Erro de conexão - Servidor está rodando?');\n    // Tentar reconectar\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(api(error.config));\n      }, 3000);\n    });\n  }\n  console.error('API Error:', {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url\n  });\n  return Promise.reject(error);\n});\nexport const authService = {\n  async login(email, senha) {\n    const {\n      data\n    } = await api.post('/api/auth/login', {\n      email,\n      senha\n    });\n    return data;\n  },\n  async register(nome, email, senha) {\n    const {\n      data\n    } = await api.post('/api/auth/register', {\n      nome,\n      email,\n      senha\n    });\n    return data;\n  },\n  async toggleFavorite(conteudoId, tipo) {\n    try {\n      var _data$isFavorited;\n      if (!conteudoId || !tipo) {\n        throw new Error('ID do conteúdo e tipo são obrigatórios');\n      }\n      const {\n        data\n      } = await api.post('/api/auth/favoritos', {\n        conteudo_id: conteudoId,\n        tipo: tipo.toLowerCase().replace('s', '')\n      });\n\n      // Garantir que temos o status do favorito na resposta\n      return {\n        ...data,\n        isFavorited: (_data$isFavorited = data.isFavorited) !== null && _data$isFavorited !== void 0 ? _data$isFavorited : false\n      };\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response4$data;\n      console.error('Detalhes do erro:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Erro ao favoritar. Tente novamente.');\n    }\n  },\n  async getFavorites() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return [];\n      const {\n        data\n      } = await api.get('/api/auth/favoritos');\n      return Array.isArray(data) ? data.map(fav => ({\n        ...fav,\n        _id: fav._id || fav.conteudo_id\n      })) : [];\n    } catch (error) {\n      console.error('Erro ao buscar favoritos:', error);\n      return [];\n    }\n  },\n  async getUserProfile() {\n    const {\n      data\n    } = await api.get('/api/auth/perfil');\n    return data;\n  },\n  async updateUserProfile(profileData) {\n    try {\n      // Verifica o tamanho da string base64 da foto\n      if (profileData.foto && profileData.foto.length > 2 * 1024 * 1024) {\n        // 2MB em caracteres base64\n        throw new Error('Imagem muito grande. Máximo: 2MB');\n      }\n      const {\n        data\n      } = await api.put('/api/auth/perfil', profileData);\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n      const updatedUser = {\n        ...currentUser,\n        ...data.user\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Erro ao atualizar perfil:', error);\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message || 'Erro ao atualizar perfil';\n    }\n  },\n  async changePassword(senhaAtual, novaSenha) {\n    try {\n      const {\n        data\n      } = await api.post('/api/auth/change-password', {\n        senha_atual: senhaAtual,\n        nova_senha: novaSenha\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport const contentService = {\n  // Cache para armazenar resultados recentes\n  _cache: new Map(),\n  _cacheTimeout: 5 * 60 * 1000,\n  // 5 minutos\n\n  async getFromCacheOrFetch(key, fetchFn) {\n    const cached = this._cache.get(key);\n    if (cached && Date.now() - cached.timestamp < this._cacheTimeout) {\n      return cached.data;\n    }\n    const data = await fetchFn();\n    this._cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n    return data;\n  },\n  async getRecentContent() {\n    return this.getFromCacheOrFetch('recent', async () => {\n      const {\n        data\n      } = await api.get('/api/recent');\n      if (data.length === 0) {\n        console.info('Nenhum item recente encontrado.'); // Ajuste para log informativo\n      }\n      return data;\n    });\n  },\n  async searchContent(query) {\n    const {\n      data\n    } = await api.get(`/api/search?q=${encodeURIComponent(query)}`);\n    return data;\n  },\n  async getItem(collection, id) {\n    try {\n      if (!id || !collection) {\n        throw new Error('ID ou collection inválidos');\n      }\n      const {\n        data\n      } = await api.get(`/api/item/${collection}/${id}`);\n      if (!data) {\n        throw new Error('Item não encontrado');\n      }\n      return {\n        ...data,\n        collection: collection,\n        tipo: collection === 'animes' ? 'anime' : 'filme'\n      };\n    } catch (error) {\n      console.error('Erro ao buscar item:', error.message);\n      throw error;\n    }\n  },\n  async getRecommendations(collection) {\n    try {\n      const {\n        data\n      } = await api.get(`/api/random/${collection}`);\n      if (!data || !Array.isArray(data)) {\n        console.warn('Dados de recomendação inválidos.');\n        return [];\n      }\n      return data.map(item => ({\n        ...item,\n        collection: collection,\n        tipo: collection === 'animes' ? 'anime' : 'filme'\n      }));\n    } catch (error) {\n      console.error('Erro ao buscar recomendações:', error.message);\n      return [];\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","getBaseUrl","hostname","window","location","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","withCredentials","retry","retryDelay","retryCount","interceptors","response","use","error","config","Promise","reject","resolve","setTimeout","request","token","localStorage","getItem","headers","Authorization","_error$response","_error$response2","_error$response2$data","_error$config","code","console","status","message","data","url","authService","login","email","senha","post","register","nome","toggleFavorite","conteudoId","tipo","_data$isFavorited","Error","conteudo_id","toLowerCase","replace","isFavorited","_error$response3","_error$response4","_error$response4$data","getFavorites","get","Array","isArray","map","fav","_id","getUserProfile","updateUserProfile","profileData","foto","length","put","currentUser","JSON","parse","updatedUser","user","setItem","stringify","_error$response5","_error$response5$data","changePassword","senhaAtual","novaSenha","senha_atual","nova_senha","contentService","_cache","Map","_cacheTimeout","getFromCacheOrFetch","key","fetchFn","cached","Date","now","timestamp","set","getRecentContent","info","searchContent","query","encodeURIComponent","collection","id","getRecommendations","warn","item"],"sources":["C:/Users/Caio/Documents/GitHub/Projetos-publicos/geekcore/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst getBaseUrl = () => {\r\n  const hostname = window.location.hostname;\r\n  return process.env.REACT_APP_API_URL || `http://${hostname}:3001`;\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: getBaseUrl(),\r\n  timeout: 30000, // Aumentar timeout para 30 segundos\r\n  withCredentials: true,\r\n  // Adicionar retry em caso de falha\r\n  retry: 3,\r\n  retryDelay: (retryCount) => retryCount * 1000\r\n});\r\n\r\n// Adicionar interceptor de retry\r\napi.interceptors.response.use(null, async (error) => {\r\n  const { config } = error;\r\n  if (!config || !config.retry) {\r\n    return Promise.reject(error);\r\n  }\r\n  \r\n  config.retryCount = config.retryCount || 0;\r\n  \r\n  if (config.retryCount >= config.retry) {\r\n    return Promise.reject(error);\r\n  }\r\n  \r\n  config.retryCount += 1;\r\n  await new Promise(resolve => setTimeout(resolve, config.retryDelay(config.retryCount)));\r\n  return api(config);\r\n});\r\n\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Melhorar o interceptor de erro\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    if (error.code === 'ERR_NETWORK') {\r\n      console.error('Erro de conexão - Servidor está rodando?');\r\n      // Tentar reconectar\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve(api(error.config));\r\n        }, 3000);\r\n      });\r\n    }\r\n    \r\n    console.error('API Error:', {\r\n      status: error.response?.status,\r\n      message: error.response?.data?.message || error.message,\r\n      url: error.config?.url\r\n    });\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  async login(email, senha) {\r\n    const { data } = await api.post('/api/auth/login', { email, senha });\r\n    return data;\r\n  },\r\n\r\n  async register(nome, email, senha) {\r\n    const { data } = await api.post('/api/auth/register', { nome, email, senha });\r\n    return data;\r\n  },\r\n\r\n  async toggleFavorite(conteudoId, tipo) {\r\n    try {\r\n      if (!conteudoId || !tipo) {\r\n        throw new Error('ID do conteúdo e tipo são obrigatórios');\r\n      }\r\n\r\n      const { data } = await api.post('/api/auth/favoritos', {\r\n        conteudo_id: conteudoId,\r\n        tipo: tipo.toLowerCase().replace('s', '')\r\n      });\r\n\r\n      // Garantir que temos o status do favorito na resposta\r\n      return {\r\n        ...data,\r\n        isFavorited: data.isFavorited ?? false\r\n      };\r\n    } catch (error) {\r\n      console.error('Detalhes do erro:', error.response?.data || error.message);\r\n      throw new Error(error.response?.data?.message || 'Erro ao favoritar. Tente novamente.');\r\n    }\r\n  },\r\n\r\n  async getFavorites() {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) return [];\r\n\r\n      const { data } = await api.get('/api/auth/favoritos');\r\n      return Array.isArray(data) ? data.map(fav => ({\r\n        ...fav,\r\n        _id: fav._id || fav.conteudo_id\r\n      })) : [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar favoritos:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async getUserProfile() {\r\n    const { data } = await api.get('/api/auth/perfil');\r\n    return data;\r\n  },\r\n\r\n  async updateUserProfile(profileData) {\r\n    try {\r\n      // Verifica o tamanho da string base64 da foto\r\n      if (profileData.foto && profileData.foto.length > 2 * 1024 * 1024) { // 2MB em caracteres base64\r\n        throw new Error('Imagem muito grande. Máximo: 2MB');\r\n      }\r\n\r\n      const { data } = await api.put('/api/auth/perfil', profileData);\r\n      \r\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\r\n      const updatedUser = { ...currentUser, ...data.user };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar perfil:', error);\r\n      throw error.response?.data?.message || error.message || 'Erro ao atualizar perfil';\r\n    }\r\n  },\r\n\r\n  async changePassword(senhaAtual, novaSenha) {\r\n    try {\r\n      const { data } = await api.post('/api/auth/change-password', {\r\n        senha_atual: senhaAtual,\r\n        nova_senha: novaSenha\r\n      });\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport const contentService = {\r\n  // Cache para armazenar resultados recentes\r\n  _cache: new Map(),\r\n  _cacheTimeout: 5 * 60 * 1000, // 5 minutos\r\n\r\n  async getFromCacheOrFetch(key, fetchFn) {\r\n    const cached = this._cache.get(key);\r\n    if (cached && Date.now() - cached.timestamp < this._cacheTimeout) {\r\n      return cached.data;\r\n    }\r\n    const data = await fetchFn();\r\n    this._cache.set(key, { data, timestamp: Date.now() });\r\n    return data;\r\n  },\r\n\r\n  async getRecentContent() {\r\n    return this.getFromCacheOrFetch('recent', async () => {\r\n      const { data } = await api.get('/api/recent');\r\n      if (data.length === 0) {\r\n        console.info('Nenhum item recente encontrado.'); // Ajuste para log informativo\r\n      }\r\n      return data;\r\n    });\r\n  },\r\n\r\n  async searchContent(query) {\r\n    const { data } = await api.get(`/api/search?q=${encodeURIComponent(query)}`);\r\n    return data;\r\n  },\r\n\r\n  async getItem(collection, id) {\r\n    try {\r\n      if (!id || !collection) {\r\n        throw new Error('ID ou collection inválidos');\r\n      }\r\n\r\n      const { data } = await api.get(`/api/item/${collection}/${id}`);\r\n      if (!data) {\r\n        throw new Error('Item não encontrado');\r\n      }\r\n\r\n      return {\r\n        ...data,\r\n        collection: collection,\r\n        tipo: collection === 'animes' ? 'anime' : 'filme'\r\n      };\r\n    } catch (error) {\r\n      console.error('Erro ao buscar item:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getRecommendations(collection) {\r\n    try {\r\n      const { data } = await api.get(`/api/random/${collection}`);\r\n      if (!data || !Array.isArray(data)) {\r\n        console.warn('Dados de recomendação inválidos.');\r\n        return [];\r\n      }\r\n\r\n      return data.map(item => ({\r\n        ...item,\r\n        collection: collection,\r\n        tipo: collection === 'animes' ? 'anime' : 'filme'\r\n      }));\r\n    } catch (error) {\r\n      console.error('Erro ao buscar recomendações:', error.message);\r\n      return [];\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}